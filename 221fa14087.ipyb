{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOTPqPZ7W39ykRAAaT12RHn"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"aNTYMc8VgVpv"},"outputs":[],"source":[]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error\n","import matplotlib.pyplot as plt\n","\n","# Load data from CSV file\n","file_path = '/content/drive/MyDrive/Colab Notebooks/Copy of train_revised.csv'\n","df = pd.read_csv(file_path)\n","\n","# Check the columns\n","print(\"Columns in the dataset:\", df.columns)\n","\n","# Extract 'hour_of_day' from 'travel_time' and 'day_of_week' from 'travel_date'\n","df['travel_time'] = pd.to_datetime(df['travel_time'], errors='coerce').dt.hour  # Extract hour\n","df['travel_date'] = pd.to_datetime(df['travel_date'], errors='coerce')  # Convert to datetime\n","df['day_of_week'] = df['travel_date'].dt.dayofweek  # Monday=0, Sunday=6\n","\n","# For 'holiday', create a placeholder column for holidays (all 0 for simplicity)\n","df['holiday'] = 0\n","\n","# Features and target variable (assuming 'max_capacity' as a proxy for 'demand')\n","X = df[['travel_time', 'day_of_week', 'holiday']]\n","y = df['max_capacity']  # Assuming max_capacity is related to demand\n","\n","# Splitting the dataset\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Creating and training the model\n","model = LinearRegression()\n","model.fit(X_train, y_train)\n","\n","# Making predictions\n","y_pred = model.predict(X_test)\n","\n","# Evaluating the model\n","mse = mean_squared_error(y_test, y_pred)\n","print(f'Mean Squared Error: {mse}')\n","\n","# Example prediction using new data from user input\n","new_data = pd.DataFrame({'travel_time': [10], 'day_of_week': [1], 'holiday': [0]})\n","predicted_demand = model.predict(new_data)\n","print(f'Predicted Demand: {predicted_demand[0]}')\n","\n","# Plotting the linear regression\n","plt.figure(figsize=(10, 6))\n","\n","# Scatter plot of actual vs predicted values\n","plt.scatter(X_test['travel_time'], y_test, color='blue', label='Actual Demand')\n","plt.scatter(X_test['travel_time'], y_pred, color='red', label='Predicted Demand')\n","\n","# Plot the regression line\n","plt.plot(X_test['travel_time'], y_pred, color='green', label='Regression Line')\n","\n","plt.title('Linear Regression: Travel Time vs Demand')\n","plt.xlabel('Travel Time (Hour of Day)')\n","plt.ylabel('Demand (Max Capacity)')\n","plt.legend()\n","\n","plt.show()"],"metadata":{"id":"NmvE7xhkgZvL"},"execution_count":null,"outputs":[]}]}